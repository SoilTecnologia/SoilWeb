{
    "sourceFile": "src/index.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1645556515584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1645556550129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,4 +80,5 @@\n   'e5ce95e1-277d-40a7-b843-6d2cb51d1e8f/0'\n );\n iotDevice.start();\n // e5ce95e1-277d-40a7-b843-6d2cb51d1e8f\n+// cae38681-5734-4629-b564-31764fef9b97/1\n"
                }
            ],
            "date": 1645556515584,
            "name": "Commit-0",
            "content": "/* eslint-disable camelcase */\n/* \nThis is the entry point of the application,\nthis file is responsible for:\n  - Setting up the Express Server\n  - Setting up AWS IoT Core (depending on the deployment RASP/CLOUD)\n  - Setting up the event emitter to be used on other systems\n*/\n\nimport express from 'express';\nimport { Server, Socket } from 'socket.io';\nimport { createServer } from 'http';\nimport cors from 'cors';\nimport router from './routes';\nimport * as raspberry from './raspberry/tests';\nimport emitter from './utils/eventBus';\nimport IoTDevice from './aws-iot/index';\n\nrequire('dotenv').config();\n\nconst PORT = 3308;\nconst app = express();\nconst httpServer = createServer(app);\nconst io = new Server(httpServer);\n\napp.use(cors());\napp.use(express.json());\napp.use(router);\nhttpServer.listen(PORT, () => {\n  console.info(`Server Listening on PORT ${PORT}`);\n});\n\nio.on('connection', (socket: Socket) => {\n  emitter.on('state-change', (status: any) => {\n    const {\n      user_id,\n      pivot_name,\n      farm_name,\n      pivot_id,\n      connection,\n      power,\n      water,\n      direction,\n      percentimeter\n    } = status;\n    socket.emit(`${user_id}-status`, {\n      type: 'status',\n      pivot_id,\n      pivot_name,\n      farm_name,\n      power,\n      water,\n      direction,\n      connection,\n      percentimeter\n    });\n\n    console.log(`socket de state: `, status);\n  });\n\n  emitter.on('variable-change', (status: any) => {\n    const { user_id, pivot_id, angle, percentimeter } = status;\n    socket.emit(`${user_id}-status`, {\n      type: 'variable',\n      pivot_id,\n      angle,\n      percentimeter\n    });\n\n    console.log(`socket de variavel: `, status);\n  });\n});\n\nraspberry.start();\n\n// const iotDevice = new IoTDevice('Cloud', 0);\nconst iotDevice = new IoTDevice(\n  'Raspberry',\n  0,\n  'e5ce95e1-277d-40a7-b843-6d2cb51d1e8f/0'\n);\niotDevice.start();\n// e5ce95e1-277d-40a7-b843-6d2cb51d1e8f\n"
        }
    ]
}