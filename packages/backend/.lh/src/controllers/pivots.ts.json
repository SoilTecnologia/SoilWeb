{
    "sourceFile": "src/controllers/pivots.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1645560363628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1645560633711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n   const nodes = await knex<Node>('nodes')\n     .select('node_id')\n     .where('farm_id', farm_id);\n \n-  for (let node of nodes) {\n+  for (const node of nodes) {\n     const pivots = await knex<Pivot>('pivots')\n       .select(\n         'pivot_id',\n         'pivot_name',\n@@ -112,9 +112,9 @@\n         'pivot_radius'\n       )\n       .where('node_id', node.node_id);\n \n-    for (let pivot of pivots) {\n+    for (const pivot of pivots) {\n       const state = await knex<State>('states')\n         .select('state_id', 'power', 'water', 'direction', 'connection')\n         .where('pivot_id', pivot.pivot_id)\n         .orderBy('timestamp', 'desc')\n@@ -179,20 +179,20 @@\n export const readListPivotController = async (\n   user_id: User['user_id'],\n   farm_id: Farm['farm_id']\n ) => {\n-  let response: ListResponse = [];\n+  const response: ListResponse = [];\n \n   const nodes = await knex<Node>('nodes')\n     .select('node_id')\n     .where('farm_id', farm_id);\n \n-  for (let node of nodes) {\n+  for (const node of nodes) {\n     const pivots = await knex<Pivot>('pivots')\n       .select('pivot_id', 'pivot_name')\n       .where('node_id', node.node_id);\n \n-    for (let pivot of pivots) {\n+    for (const pivot of pivots) {\n       const state = await knex<State>('states')\n         .select('state_id', 'power', 'water', 'direction')\n         .where('pivot_id', pivot.pivot_id)\n         .orderBy('timestamp', 'desc')\n@@ -250,25 +250,25 @@\n   let shouldNotifyUpdate = false;\n   let shouldNotifyState = false;\n   let state: State | undefined;\n \n-  let pivot = await knex<Pivot>('pivots')\n+  const pivot = await knex<Pivot>('pivots')\n     .select('node_id', 'pivot_name')\n     .where('pivot_id', pivot_id)\n     .first();\n   const { node_id, pivot_name } = pivot!;\n-  let node = await knex<Node>('nodes')\n+  const node = await knex<Node>('nodes')\n     .select('farm_id')\n     .where('node_id', node_id)\n     .first();\n   const { farm_id } = node!;\n-  let farm = await knex<Node>('farms')\n+  const farm = await knex<Node>('farms')\n     .select('user_id', 'farm_name')\n     .where('farm_id', farm_id)\n     .first();\n   const { user_id, farm_name } = farm!;\n \n-  let oldState = await knex<State>('states')\n+  const oldState = await knex<State>('states')\n     .where('pivot_id', pivot_id)\n     .orderBy('timestamp', 'desc')\n     .first();\n \n@@ -335,9 +335,9 @@\n       });\n     }\n   }\n \n-  //teste\n+  // teste\n \n   if (shouldNotifyUpdate) {\n     const pivot = await knex('pivots').select('*').where({ pivot_id }).first();\n     const { node_id } = pivot;\n@@ -382,7 +382,5 @@\n         angle\n       });\n     }\n   }\n-\n-  return;\n };\n"
                },
                {
                    "date": 1645560778040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n   const nodes = await knex<Node>('nodes')\n     .select('node_id')\n     .where('farm_id', farm_id);\n \n-  for (const node of nodes) {\n+  for (let node of nodes) {\n     const pivots = await knex<Pivot>('pivots')\n       .select(\n         'pivot_id',\n         'pivot_name',\n@@ -112,9 +112,9 @@\n         'pivot_radius'\n       )\n       .where('node_id', node.node_id);\n \n-    for (const pivot of pivots) {\n+    for (let pivot of pivots) {\n       const state = await knex<State>('states')\n         .select('state_id', 'power', 'water', 'direction', 'connection')\n         .where('pivot_id', pivot.pivot_id)\n         .orderBy('timestamp', 'desc')\n@@ -179,20 +179,20 @@\n export const readListPivotController = async (\n   user_id: User['user_id'],\n   farm_id: Farm['farm_id']\n ) => {\n-  const response: ListResponse = [];\n+  let response: ListResponse = [];\n \n   const nodes = await knex<Node>('nodes')\n     .select('node_id')\n     .where('farm_id', farm_id);\n \n-  for (const node of nodes) {\n+  for (let node of nodes) {\n     const pivots = await knex<Pivot>('pivots')\n       .select('pivot_id', 'pivot_name')\n       .where('node_id', node.node_id);\n \n-    for (const pivot of pivots) {\n+    for (let pivot of pivots) {\n       const state = await knex<State>('states')\n         .select('state_id', 'power', 'water', 'direction')\n         .where('pivot_id', pivot.pivot_id)\n         .orderBy('timestamp', 'desc')\n@@ -250,25 +250,25 @@\n   let shouldNotifyUpdate = false;\n   let shouldNotifyState = false;\n   let state: State | undefined;\n \n-  const pivot = await knex<Pivot>('pivots')\n+  let pivot = await knex<Pivot>('pivots')\n     .select('node_id', 'pivot_name')\n     .where('pivot_id', pivot_id)\n     .first();\n   const { node_id, pivot_name } = pivot!;\n-  const node = await knex<Node>('nodes')\n+  let node = await knex<Node>('nodes')\n     .select('farm_id')\n     .where('node_id', node_id)\n     .first();\n   const { farm_id } = node!;\n-  const farm = await knex<Node>('farms')\n+  let farm = await knex<Node>('farms')\n     .select('user_id', 'farm_name')\n     .where('farm_id', farm_id)\n     .first();\n   const { user_id, farm_name } = farm!;\n \n-  const oldState = await knex<State>('states')\n+  let oldState = await knex<State>('states')\n     .where('pivot_id', pivot_id)\n     .orderBy('timestamp', 'desc')\n     .first();\n \n@@ -293,9 +293,9 @@\n \n     state = newState[0];\n   }\n \n-  if (angle != undefined && percentimeter != undefined) {\n+  if (angle !== undefined && percentimeter !== undefined) {\n     if (state) {\n       const oldStateVariable = await knex<StateVariable>('state_variables')\n         .where('state_id', state.state_id)\n         .orderBy('timestamp', 'desc')\n@@ -315,9 +315,9 @@\n       }\n     }\n   }\n \n-  if (father != undefined && rssi != undefined) {\n+  if (father !== undefined && rssi !== undefined) {\n     const oldRadioVariable = await knex<RadioVariable>('radio_variables')\n       .where('pivot_id', pivot_id)\n       .orderBy('timestamp', 'desc')\n       .first();\n"
                },
                {
                    "date": 1645560840704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n export const readMapPivotController = async (\n   user_id: User['user_id'],\n   farm_id: Farm['farm_id']\n ): Promise<MapResponse> => {\n-  const pivotArray: Array<PartialMapResponse> = [];\n+  let pivotArray: Array<PartialMapResponse> = [];\n \n   const farm = await knex<Farm>('farms')\n     .select('farm_lng', 'farm_lat')\n     .where('farm_id', farm_id)\n@@ -293,9 +293,9 @@\n \n     state = newState[0];\n   }\n \n-  if (angle !== undefined && percentimeter !== undefined) {\n+  if (angle != undefined && percentimeter != undefined) {\n     if (state) {\n       const oldStateVariable = await knex<StateVariable>('state_variables')\n         .where('state_id', state.state_id)\n         .orderBy('timestamp', 'desc')\n@@ -315,9 +315,9 @@\n       }\n     }\n   }\n \n-  if (father !== undefined && rssi !== undefined) {\n+  if (father != undefined && rssi != undefined) {\n     const oldRadioVariable = await knex<RadioVariable>('radio_variables')\n       .where('pivot_id', pivot_id)\n       .orderBy('timestamp', 'desc')\n       .first();\n"
                }
            ],
            "date": 1645560363628,
            "name": "Commit-0",
            "content": "import Farm from '../models/farm';\nimport User from '../models/user';\nimport Pivot from '../models/pivot';\nimport State from '../models/state';\nimport StateVariable from '../models/stateVariable';\nimport RadioVariable from '../models/radioVariable';\n\nimport {\n  isStateDifferent,\n  isStateVariableDifferent,\n  isRadioVariableDifferent\n} from '../utils/isDifferent';\n\nimport knex from '../database';\nimport emitter from '../utils/eventBus';\nimport { getLastCycleFromPivot } from './cycles';\n\nexport const createPivotController = async (\n  pivot_id: Pivot['pivot_id'],\n  node_id: Pivot['node_id'],\n  radio_id: Pivot['radio_id'],\n  pivot_name: Pivot['pivot_name'],\n  pivot_lng: Pivot['pivot_lng'],\n  pivot_lat: Pivot['pivot_lat'],\n  pivot_start_angle: Pivot['pivot_start_angle'],\n  pivot_end_angle: Pivot['pivot_end_angle'],\n  pivot_radius: Pivot['pivot_radius']\n) => {\n  const newPivot = await knex<Pivot>('pivots').insert({\n    pivot_id,\n    node_id,\n    radio_id,\n    pivot_name,\n    pivot_lng,\n    pivot_lat,\n    pivot_start_angle,\n    pivot_end_angle,\n    pivot_radius\n  });\n\n  return newPivot;\n};\n\nexport const readAllPivotController = async (farm_id: Farm['farm_id']) => {\n  const pivots = await knex<Pivot>('pivots')\n    .select('*')\n    .join('nodes', 'pivots.node_id', 'nodes.node_id')\n    .where('nodes.farm_id', farm_id);\n\n  return pivots;\n};\n\nexport const readOnePivotController = async (pivot_id: Pivot['pivot_id']) => {\n  const pivot = await knex<Pivot>('pivots')\n    .select('*')\n    .where({ pivot_id })\n    .first();\n\n  return pivot;\n};\n\nexport const readAllPivotsController2 = async () => {\n  const pivots = await knex<Pivot>('pivots').select('*');\n\n  return pivots;\n};\n\ntype PartialMapResponse = {\n  pivot_id: Pivot['pivot_id'];\n  pivot_lng: Pivot['pivot_lng'];\n  pivot_lat: Pivot['pivot_lat'];\n  pivot_start_angle: Pivot['pivot_start_angle'];\n  pivot_end_angle: Pivot['pivot_end_angle'];\n  pivot_radius: Pivot['pivot_radius'];\n  power: State['power'];\n  connection: State['connection'];\n  water: State['water'];\n  direction: State['direction'];\n  start_angle: StateVariable['angle'];\n  end_angle: StateVariable['angle'];\n};\ntype MapResponse = {\n  farm_lng: Farm['farm_lng'];\n  farm_lat: Farm['farm_lat'];\n  pivots: Array<PartialMapResponse>;\n};\n\nexport const readMapPivotController = async (\n  user_id: User['user_id'],\n  farm_id: Farm['farm_id']\n): Promise<MapResponse> => {\n  const pivotArray: Array<PartialMapResponse> = [];\n\n  const farm = await knex<Farm>('farms')\n    .select('farm_lng', 'farm_lat')\n    .where('farm_id', farm_id)\n    .first();\n\n  const nodes = await knex<Node>('nodes')\n    .select('node_id')\n    .where('farm_id', farm_id);\n\n  for (let node of nodes) {\n    const pivots = await knex<Pivot>('pivots')\n      .select(\n        'pivot_id',\n        'pivot_name',\n        'pivot_lng',\n        'pivot_lat',\n        'pivot_start_angle',\n        'pivot_end_angle',\n        'pivot_radius'\n      )\n      .where('node_id', node.node_id);\n\n    for (let pivot of pivots) {\n      const state = await knex<State>('states')\n        .select('state_id', 'power', 'water', 'direction', 'connection')\n        .where('pivot_id', pivot.pivot_id)\n        .orderBy('timestamp', 'desc')\n        .first();\n\n      const variables = await getLastCycleFromPivot(pivot.pivot_id);\n\n      if (state && variables && variables.length > 0) {\n        pivotArray.push({\n          pivot_id: pivot.pivot_id,\n          pivot_lng: pivot.pivot_lng,\n          pivot_lat: pivot.pivot_lat,\n          pivot_start_angle: pivot.pivot_start_angle,\n          pivot_end_angle: pivot.pivot_end_angle,\n          pivot_radius: pivot.pivot_radius,\n          power: state.power,\n          water: state.water,\n          direction: state.direction,\n          connection: state.connection,\n          start_angle: variables[0]!.angle,\n          end_angle: variables[variables.length - 1]!.angle\n        });\n      } else {\n        pivotArray.push({\n          pivot_id: pivot.pivot_id,\n          pivot_lng: pivot.pivot_lng,\n          pivot_lat: pivot.pivot_lat,\n          pivot_start_angle: pivot.pivot_start_angle,\n          pivot_end_angle: pivot.pivot_end_angle,\n          pivot_radius: pivot.pivot_radius,\n          power: false,\n          water: false,\n          direction: null,\n          connection: true,\n          start_angle: pivot.pivot_start_angle,\n          end_angle: pivot.pivot_start_angle\n        });\n      }\n    }\n  }\n\n  return {\n    farm_lat: farm!.farm_lat,\n    farm_lng: farm!.farm_lng,\n    pivots: pivotArray\n  };\n};\n\ntype PartialListResponse = {\n  pivot_id: Pivot['pivot_id'];\n  pivot_name: Pivot['pivot_name'];\n  power: State['power'];\n  water: State['water'];\n  direction: State['direction'];\n  percentimeter: StateVariable['percentimeter'];\n  rssi: RadioVariable['rssi'];\n  father: RadioVariable['father'];\n  timestamp: StateVariable['timestamp'] | null;\n};\ntype ListResponse = Array<PartialListResponse>;\n\nexport const readListPivotController = async (\n  user_id: User['user_id'],\n  farm_id: Farm['farm_id']\n) => {\n  let response: ListResponse = [];\n\n  const nodes = await knex<Node>('nodes')\n    .select('node_id')\n    .where('farm_id', farm_id);\n\n  for (let node of nodes) {\n    const pivots = await knex<Pivot>('pivots')\n      .select('pivot_id', 'pivot_name')\n      .where('node_id', node.node_id);\n\n    for (let pivot of pivots) {\n      const state = await knex<State>('states')\n        .select('state_id', 'power', 'water', 'direction')\n        .where('pivot_id', pivot.pivot_id)\n        .orderBy('timestamp', 'desc')\n        .first();\n\n      if (state) {\n        const variable = await knex<StateVariable>('state_variables')\n          .select('percentimeter', 'timestamp')\n          .where('state_id', state.state_id)\n          .orderBy('timestamp', 'desc')\n          .first();\n\n        response.push({\n          pivot_id: pivot.pivot_id,\n          pivot_name: pivot.pivot_name,\n          power: state.power,\n          water: state.water,\n          direction: state.direction,\n          percentimeter: variable ? variable.percentimeter : null,\n          rssi: null,\n          father: null,\n          timestamp: variable ? new Date(variable.timestamp) : null\n        });\n      } else {\n        response.push({\n          pivot_id: pivot.pivot_id,\n          pivot_name: pivot.pivot_name,\n          power: false,\n          water: false,\n          direction: null,\n          percentimeter: 0,\n          rssi: null,\n          father: null,\n          timestamp: null\n        });\n      }\n    }\n  }\n\n  return response;\n};\n\nexport const updatePivotController = async (\n  pivot_id: Pivot['pivot_id'],\n  connection: State['connection'],\n  power: State['power'],\n  water: State['water'],\n  direction: State['direction'],\n  angle: StateVariable['angle'],\n  percentimeter: StateVariable['percentimeter'],\n  timestamp: Date,\n  father: RadioVariable['father'],\n  rssi: RadioVariable['rssi']\n) => {\n  let shouldNotifyUpdate = false;\n  let shouldNotifyState = false;\n  let state: State | undefined;\n\n  let pivot = await knex<Pivot>('pivots')\n    .select('node_id', 'pivot_name')\n    .where('pivot_id', pivot_id)\n    .first();\n  const { node_id, pivot_name } = pivot!;\n  let node = await knex<Node>('nodes')\n    .select('farm_id')\n    .where('node_id', node_id)\n    .first();\n  const { farm_id } = node!;\n  let farm = await knex<Node>('farms')\n    .select('user_id', 'farm_name')\n    .where('farm_id', farm_id)\n    .first();\n  const { user_id, farm_name } = farm!;\n\n  let oldState = await knex<State>('states')\n    .where('pivot_id', pivot_id)\n    .orderBy('timestamp', 'desc')\n    .first();\n\n  state = oldState;\n\n  if (\n    !oldState ||\n    isStateDifferent(oldState, { connection, power, water, direction })\n  ) {\n    shouldNotifyUpdate = true;\n    shouldNotifyState = true;\n    const newState = await knex<State>('states')\n      .insert({\n        pivot_id,\n        connection,\n        power,\n        water,\n        direction,\n        timestamp: new Date(timestamp)\n      })\n      .returning('*');\n\n    state = newState[0];\n  }\n\n  if (angle != undefined && percentimeter != undefined) {\n    if (state) {\n      const oldStateVariable = await knex<StateVariable>('state_variables')\n        .where('state_id', state.state_id)\n        .orderBy('timestamp', 'desc')\n        .first();\n\n      if (\n        !oldStateVariable ||\n        isStateVariableDifferent(oldStateVariable, { angle, percentimeter })\n      ) {\n        shouldNotifyUpdate = true;\n        await knex<StateVariable>('state_variables').insert({\n          state_id: state.state_id,\n          angle,\n          percentimeter,\n          timestamp: new Date(timestamp)\n        });\n      }\n    }\n  }\n\n  if (father != undefined && rssi != undefined) {\n    const oldRadioVariable = await knex<RadioVariable>('radio_variables')\n      .where('pivot_id', pivot_id)\n      .orderBy('timestamp', 'desc')\n      .first();\n    if (\n      !oldRadioVariable ||\n      isRadioVariableDifferent(oldRadioVariable, { father, rssi })\n    ) {\n      shouldNotifyUpdate = true;\n      await knex<RadioVariable>('radio_variables').insert({\n        pivot_id,\n        state_id: state!.state_id,\n        father,\n        rssi,\n        timestamp: new Date(timestamp)\n      });\n    }\n  }\n\n  //teste\n\n  if (shouldNotifyUpdate) {\n    const pivot = await knex('pivots').select('*').where({ pivot_id }).first();\n    const { node_id } = pivot;\n\n    const node = await knex('nodes').select('*').where({ node_id }).first();\n    const { farm_id, node_name } = node;\n\n    emitter.emit('status', {\n      farm_id,\n      node_name,\n      payload: {\n        pivot_id,\n        connection,\n        power,\n        water,\n        direction,\n        angle,\n        percentimeter,\n        timestamp,\n        father,\n        rssi\n      }\n    });\n\n    if (shouldNotifyState) {\n      emitter.emit('state-change', {\n        user_id,\n        pivot_id,\n        pivot_name,\n        farm_name,\n        power,\n        water,\n        direction,\n        connection,\n        percentimeter\n      });\n    } else {\n      emitter.emit('variable-change', {\n        user_id,\n        pivot_id,\n        percentimeter,\n        angle\n      });\n    }\n  }\n\n  return;\n};\n"
        }
    ]
}