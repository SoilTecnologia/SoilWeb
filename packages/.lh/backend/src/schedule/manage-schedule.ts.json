{
    "sourceFile": "backend/src/schedule/manage-schedule.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1651590200052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1651591926748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,24 @@\n-import { SchedulingModel } from '../database/model/Scheduling';\n+import { ScheduledTask } from 'node-cron';\n+import cronJob from './SendAction';\n \n-const SendAction = require('./SendAction');\n+class ManageSchedule {\n+  private jobs: ScheduledTask[];\n \n-class manageSchedule {\n-  private jobs: SchedulingModel[];\n-  constructor() {\n-    this.jobs = [{} as SchedulingModel];\n+  // constructor() {\n+  //   this.jobs = cronJob;\n+  // }\n+  async getScheduling() {\n+    const getAllSchedullingUseCase = container.resolve(GetAllSchedulingUseCase);\n+    const schedulling = await getAllSchedullingUseCase.execute();\n+    return schedulling;\n   }\n-\n   run() {\n     this.jobs.forEach((job) => job.start());\n   }\n+\n+  start() {\n+    this.getScheduling();\n+  }\n }\n \n-module.exports = new manageSchedule();\n+export const manageSchedule = new ManageSchedule();\n"
                },
                {
                    "date": 1651592063370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,30 @@\n import { ScheduledTask } from 'node-cron';\n+import { container } from 'tsyringe';\n+import { SchedulingModel } from '../database/model/Scheduling';\n+import { GetAllSchedulingUseCase } from '../useCases/Scheduling/GetAllScheduling/GetAllSchedulingUseCase';\n import cronJob from './SendAction';\n \n class ManageSchedule {\n-  private jobs: ScheduledTask[];\n+  private jobs: SchedulingModel[];\n \n-  // constructor() {\n-  //   this.jobs = cronJob;\n-  // }\n+  constructor() {\n+    this.jobs = [];\n+  }\n   async getScheduling() {\n     const getAllSchedullingUseCase = container.resolve(GetAllSchedulingUseCase);\n     const schedulling = await getAllSchedullingUseCase.execute();\n     return schedulling;\n   }\n+\n   run() {\n     this.jobs.forEach((job) => job.start());\n   }\n \n-  start() {\n-    this.getScheduling();\n+  async start() {\n+    const schedulling = await this.getScheduling();\n+    if (schedulling && schedulling.length > 0) {\n+    }\n   }\n }\n \n export const manageSchedule = new ManageSchedule();\n"
                },
                {
                    "date": 1651592158497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,22 +9,25 @@\n \n   constructor() {\n     this.jobs = [];\n   }\n+\n   async getScheduling() {\n     const getAllSchedullingUseCase = container.resolve(GetAllSchedulingUseCase);\n     const schedulling = await getAllSchedullingUseCase.execute();\n-    return schedulling;\n+    if (schedulling && schedulling.length > 0) {\n+      for (const job of schedulling) {\n+        this.jobs.push(job);\n+      }\n+    }\n   }\n \n-  run() {\n-    this.jobs.forEach((job) => job.start());\n-  }\n+  // run() {\n+  //   this.jobs.forEach((job) => job.start());\n+  // }\n \n   async start() {\n     const schedulling = await this.getScheduling();\n-    if (schedulling && schedulling.length > 0) {\n-    }\n   }\n }\n \n export const manageSchedule = new ManageSchedule();\n"
                },
                {
                    "date": 1651592203944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,14 +10,16 @@\n   constructor() {\n     this.jobs = [];\n   }\n \n+  addJob(schedulling: SchedulingModel) {\n+    this.jobs.push(job);\n+  }\n   async getScheduling() {\n     const getAllSchedullingUseCase = container.resolve(GetAllSchedulingUseCase);\n     const schedulling = await getAllSchedullingUseCase.execute();\n     if (schedulling && schedulling.length > 0) {\n       for (const job of schedulling) {\n-        this.jobs.push(job);\n       }\n     }\n   }\n \n"
                },
                {
                    "date": 1651592430525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import { ScheduledTask } from 'node-cron';\n import { container } from 'tsyringe';\n import { SchedulingModel } from '../database/model/Scheduling';\n import { GetAllSchedulingUseCase } from '../useCases/Scheduling/GetAllScheduling/GetAllSchedulingUseCase';\n+import emitter from '../utils/eventBus';\n import cronJob from './SendAction';\n \n class ManageSchedule {\n   private jobs: SchedulingModel[];\n@@ -11,25 +12,32 @@\n     this.jobs = [];\n   }\n \n   addJob(schedulling: SchedulingModel) {\n-    this.jobs.push(job);\n+    this.jobs.push(schedulling);\n   }\n+\n   async getScheduling() {\n     const getAllSchedullingUseCase = container.resolve(GetAllSchedulingUseCase);\n     const schedulling = await getAllSchedullingUseCase.execute();\n     if (schedulling && schedulling.length > 0) {\n-      for (const job of schedulling) {\n-      }\n+      for (const job of schedulling) this.addJob(job)\n     }\n   }\n \n   // run() {\n   //   this.jobs.forEach((job) => job.start());\n   // }\n+  async listeningEmitter(){\n+    emitter.on(\"scheduling\", (scheduleJob: SchedulingModel) => {\n+      this.addJob(scheduleJob)\n+    })\n+  }\n+  async start() {\n+    await this.getScheduling();\n+    \n \n-  async start() {\n-    const schedulling = await this.getScheduling();\n+    if()\n   }\n }\n \n export const manageSchedule = new ManageSchedule();\n"
                },
                {
                    "date": 1651595637074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,25 +19,27 @@\n   async getScheduling() {\n     const getAllSchedullingUseCase = container.resolve(GetAllSchedulingUseCase);\n     const schedulling = await getAllSchedullingUseCase.execute();\n     if (schedulling && schedulling.length > 0) {\n-      for (const job of schedulling) this.addJob(job)\n+      for (const job of schedulling) this.addJob(job);\n     }\n   }\n \n-  // run() {\n-  //   this.jobs.forEach((job) => job.start());\n-  // }\n-  async listeningEmitter(){\n-    emitter.on(\"scheduling\", (scheduleJob: SchedulingModel) => {\n-      this.addJob(scheduleJob)\n-    })\n-  }\n   async start() {\n     await this.getScheduling();\n-    \n \n-    if()\n+    emitter.on('scheduling', (scheduleJob: SchedulingModel) => {\n+      this.addJob(scheduleJob);\n+    });\n+\n+    if (this.jobs && this.jobs.length > 0) {\n+      for (const job of this.jobs) {\n+        console.log('Add job to listening scheduling');\n+        console.log('...');\n+        console.log(job);\n+        console.log('...');\n+      }\n+    }\n   }\n }\n \n export const manageSchedule = new ManageSchedule();\n"
                },
                {
                    "date": 1651595925569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n import { container } from 'tsyringe';\n import { SchedulingModel } from '../database/model/Scheduling';\n import { GetAllSchedulingUseCase } from '../useCases/Scheduling/GetAllScheduling/GetAllSchedulingUseCase';\n import emitter from '../utils/eventBus';\n-import cronJob from './SendAction';\n \n class ManageSchedule {\n   private jobs: SchedulingModel[];\n \n"
                },
                {
                    "date": 1651596035228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,13 +10,13 @@\n   constructor() {\n     this.jobs = [];\n   }\n \n-  addJob(schedulling: SchedulingModel) {\n+  private addJob(schedulling: SchedulingModel) {\n     this.jobs.push(schedulling);\n   }\n \n-  async getScheduling() {\n+  private async getScheduling() {\n     const getAllSchedullingUseCase = container.resolve(GetAllSchedulingUseCase);\n     const schedulling = await getAllSchedullingUseCase.execute();\n     if (schedulling && schedulling.length > 0) {\n       for (const job of schedulling) this.addJob(job);\n"
                },
                {
                    "date": 1651596223173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import { container } from 'tsyringe';\n import { SchedulingModel } from '../database/model/Scheduling';\n import { GetAllSchedulingUseCase } from '../useCases/Scheduling/GetAllScheduling/GetAllSchedulingUseCase';\n import emitter from '../utils/eventBus';\n+import { listenerSchedule } from './SendAction';\n \n class ManageSchedule {\n   private jobs: SchedulingModel[];\n \n@@ -35,8 +36,10 @@\n         console.log('Add job to listening scheduling');\n         console.log('...');\n         console.log(job);\n         console.log('...');\n+\n+        listenerSchedule.addListening(job);\n       }\n     }\n   }\n }\n"
                },
                {
                    "date": 1651596229035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         console.log('...');\n         console.log(job);\n         console.log('...');\n \n-        listenerSchedule.addListening(job);\n+        await listenerSchedule.addListening(job);\n       }\n     }\n   }\n }\n"
                }
            ],
            "date": 1651590200052,
            "name": "Commit-0",
            "content": "import { SchedulingModel } from '../database/model/Scheduling';\n\nconst SendAction = require('./SendAction');\n\nclass manageSchedule {\n  private jobs: SchedulingModel[];\n  constructor() {\n    this.jobs = [{} as SchedulingModel];\n  }\n\n  run() {\n    this.jobs.forEach((job) => job.start());\n  }\n}\n\nmodule.exports = new manageSchedule();\n"
        }
    ]
}