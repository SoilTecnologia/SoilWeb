{
    "sourceFile": "packages/backend/src/raspberry/tests.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1645283723456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1645283723456,
            "name": "Commit-0",
            "content": "import { Readable } from 'stream';\nimport { FormDataEncoder } from 'form-data-encoder';\nimport { FormData } from 'formdata-node';\nimport Axios, { AxiosResponse } from 'axios';\nimport emitter from '../utils/eventBus';\nimport Queue from '../utils/queue';\nimport {\n  StatusObject,\n  statusStringToObject,\n  objectToActionString\n} from '../utils/conversions';\nimport {\n  updatePivotController,\n  readAllPivotsController2\n} from '../controllers/pivots';\nimport {\n  readAllActionsController,\n  updateActionController\n} from '../controllers/actions';\nimport Action from '../models/action';\n\nconst TIMEOUT = 10000;\n\ntype ActionData = {\n  action: Action;\n  timestamp: Date;\n  attempts: number;\n};\n\ntype IdleData = {\n  pivot_id: string;\n  radio_id: number;\n  attempts: number;\n};\n\nconst activeQueue: Queue<ActionData> = new Queue<ActionData>(); // Guarda as intenções 351..., vao participar da pool que atualiza mais rapido\nconst idleQueue: Queue<IdleData> = new Queue<IdleData>(); // Guarda as intenções 00000, vao participar da pool que atualiza de forma mais devagar\n\nlet ready = true;\n\nexport const start = async () => {\n  loadActions();\n  loadPivots();\n\n  emitter.on('action', (action) => {\n    activeQueue.enqueue({\n      action: action.payload,\n      timestamp: new Date(),\n      attempts: 0\n    });\n  });\n\n  // Seta um intervalo para ficar checando a pool\n  // Dentro da checkPool existe uma flag ready para ver se ja posso checar o proximo\n  setInterval(() => {\n    if (ready) checkPool();\n  }, 5000);\n};\n\ntype RadioResponse = {\n  cmd: number;\n  id: number;\n  payload: Array<number>;\n  status: string;\n};\n\nconst sendData = async (radio_id: number, data: string) => {\n  const bodyFormData = new FormData();\n\n  bodyFormData.set('ID', radio_id);\n  // bodyFormData.set('CMD', '40');\n  bodyFormData.set('intencao', data);\n  const encoder = new FormDataEncoder(bodyFormData);\n\n  // let response = await Axios.post<RadioResponse>(\n  //   'http://localhost:8080/comands',\n  //   Readable.from(encoder),\n  //   { headers: encoder.headers, timeout: TIMEOUT }\n  // );\n  const response = await Axios.post<RadioResponse>(\n    'http://192.168.100.101:3031/comands',\n    Readable.from(encoder),\n    { headers: encoder.headers, timeout: TIMEOUT }\n  );\n\n  return response;\n};\n\n/*\nCheca se a resposta da placa é igual à uma action que mandamos à ela\n*/\nconst checkResponse = (action: Action, payload: StatusObject) => {\n  if (payload) {\n    if (action.power) {\n      // Se nossa intenção era ligar, checamos todo o payload\n      if (\n        payload.power == action.power &&\n        payload.water == action.water &&\n        payload.direction == action.direction\n      )\n        return true;\n    } else {\n      // Caso contrário checamos apenas se o estado do pivo e da bomba, sem levar em conta a direction\n      if (payload.power == action.power && payload.water == action.water)\n        return true;\n    }\n  }\n\n  return false;\n};\n\nconst checkPool = async () => {\n  ready = false;\n  if (!activeQueue.isEmpty()) {\n    console.log('CHECKING ACTIVE');\n    const current = activeQueue.peek();\n\n    try {\n      const { power, water, direction, percentimeter } = current.action;\n      const actionString = objectToActionString(\n        power,\n        water,\n        direction,\n        percentimeter\n      );\n      console.log(\n        `Sending Action to radio ${current.action.radio_id}: ${actionString}`\n      );\n      const response = await sendData(current.action.radio_id, actionString);\n      const { data } = response;\n\n      const { payload } = data;\n      // const payloadToString = String.fromCharCode(...payload);\n      const payloadToString = new TextDecoder().decode(new Uint8Array(payload));\n\n      const payloadObject = statusStringToObject(\n        payloadToString.substring(0, payloadToString.indexOf('#'))\n      );\n\n      if (\n        payloadObject &&\n        current.action.radio_id == data.id &&\n        checkResponse(current.action, payloadObject)\n      ) {\n        await updatePivotController(\n          current.action.pivot_id,\n          true,\n          payloadObject.power,\n          payloadObject.water,\n          payloadObject.direction,\n          payloadObject.angle,\n          payloadObject.percentimeter,\n          payloadObject.timestamp,\n          '',\n          null\n        );\n        current.attempts = 0;\n\n        console.log('UPDATING ACTION:', current.action.action_id);\n        await updateActionController(current.action.action_id, true);\n        activeQueue.dequeue();\n      } else {\n        current.attempts++;\n      }\n    } catch (err) {\n      current.attempts++;\n      console.log(`[ERROR - RASPBERRY.TEST]: ${err}`);\n    } finally {\n      if (current.attempts > 4) {\n        console.log('Failing PIVOT');\n        await updatePivotController(\n          current.action.pivot_id,\n          false,\n          null,\n          null,\n          null,\n          null,\n          null,\n          new Date(),\n          null,\n          null\n        );\n        const removed = activeQueue.dequeue()!;\n        await updateActionController(removed.action.action_id, false);\n      }\n    }\n  } else if (!idleQueue.isEmpty()) {\n    let current = idleQueue.peek();\n    console.log('CHECKING IDLE');\n\n    try {\n      console.log(`Checking radio ${current.radio_id}`);\n      const response = await sendData(current.radio_id, '000000');\n      const { data } = response;\n\n      const { payload } = data;\n      const payloadToString = new TextDecoder().decode(new Uint8Array(payload));\n      const payloadObject = statusStringToObject(\n        payloadToString.substring(0, payloadToString.indexOf('#'))\n      );\n\n      if (payloadObject && current.radio_id == data.id) {\n        await updatePivotController(\n          current.pivot_id,\n          true,\n          payloadObject.power,\n          payloadObject.water,\n          payloadObject.direction,\n          payloadObject.angle,\n          payloadObject.percentimeter,\n          new Date(),\n          null,\n          null\n        );\n        current.attempts = 0;\n      } else {\n        current.attempts++;\n      }\n    } catch (err) {\n      console.log(`[ERROR]: ${err}`);\n      current.attempts++;\n    } finally {\n      if (current.attempts >= 10) {\n        console.log('Failing PIVOT');\n        await updatePivotController(\n          current.pivot_id,\n          false,\n          null,\n          null,\n          null,\n          null,\n          null,\n          new Date(),\n          null,\n          null\n        );\n      }\n\n      current = idleQueue.dequeue()!;\n      idleQueue.enqueue(current);\n    }\n  }\n  ready = true;\n};\n\nexport const loadActions = async () => {\n  const allActions = await readAllActionsController();\n\n  for (const action of allActions) {\n    activeQueue.enqueue({ action, attempts: 0, timestamp: new Date() });\n  }\n};\n\nexport const loadPivots = async () => {\n  const allPivots = await readAllPivotsController2();\n\n  for (const pivot of allPivots) {\n    idleQueue.enqueue({\n      pivot_id: pivot.pivot_id,\n      radio_id: pivot.radio_id,\n      attempts: 0\n    });\n  }\n};\n\n// Sends data to radio\n// Returns the response\n// The payload is a array of Decimal numbers, needs to be converted\n\n// const checkPool = async () => {\n//   ready = false;\n//   if (fatherCounter < fatherUpdate) {\n//     // console.log(\n//     //   'Check Pool: ',\n//     //   'IDLE: ',\n//     //   idlePool.length,\n//     //   ' ACTIVE: ',\n//     //   activePool.length\n//     // );\n//     for (let activeIntent of activePool) {\n//       console.log(\n//         '[ACTIVE]\\tSending data to pivot',\n//         activeIntent.intent.radio_name\n//       );\n\n//       try {\n//         const result = await sendData(activeIntent);\n//         const { response, response_time } = result;\n//         if (\n//           response.status == 200 &&\n//           response.data.id == activeIntent.intent.radio_name\n//         ) {\n//           activePool = activePool.filter((value) => value != activeIntent);\n\n//           activeIntent.timestamp = new Date();\n//           activeIntent.attempts = 0;\n//           idlePool.push(activeIntent);\n//           processResponse(\n//             activeIntent.intent.radio_name,\n//             activeIntent.intent,\n//             response.data,\n//             response_time\n//           );\n//         } else {\n//           console.log(\n//             `[ERROR]\\tResposta de outro id: -> ${activeIntent.intent.radio_name} | -> ${response.data.id}`\n//           );\n//           activeIntent.attempts++;\n\n//           if (activeIntent.attempts >= 5) {\n//             await updatePivotController(\n//               activeIntent.intent.radio_name,\n//               'OFFLINE'\n//             );\n//             activeIntent.attempts = 0;\n//           }\n//         }\n//       } catch (err) {\n//         console.log('[TIMEOUT]\\ton', activeIntent.intent.radio_name);\n//         activeIntent.attempts++;\n\n//         activePool = activePool.filter((value) => value != activeIntent);\n\n//         activeIntent.timestamp = new Date();\n//         idlePool.push(activeIntent);\n\n//         if (activeIntent.attempts >= 5) {\n//           await updatePivotController(\n//             activeIntent.intent.radio_name,\n//             'OFFLINE'\n//           );\n//           activeIntent.attempts = 0;\n//         }\n//       }\n//     }\n\n//     for (let idleIntent of idlePool) {\n//       if (\n//         new Date().getTime() - new Date(idleIntent.timestamp).getTime() >=\n//         8000\n//       ) {\n//         console.log(\n//           '[IDLE]\\tSending data to pivot',\n//           idleIntent.intent.radio_name\n//         );\n\n//         try {\n//           const result = await sendData(idleIntent);\n//           const { response, response_time } = result;\n//           if (\n//             response.status == 200 &&\n//             response.data.id == idleIntent.intent.radio_name\n//           ) {\n//             idleIntent.timestamp = new Date();\n//             idleIntent.attempts = 0;\n//             processResponse(\n//               idleIntent.intent.radio_name,\n//               idleIntent.intent,\n//               response.data,\n//               response_time\n//             );\n//           } else {\n//             console.log(\n//               `[ERROR]\\tResposta de outro id: -> ${idleIntent.intent.radio_name} | -> ${response.data.id}`\n//             );\n//             idleIntent.attempts++;\n\n//             if (idleIntent.attempts >= 5) {\n//               await updatePivotController(\n//                 idleIntent.intent.radio_name,\n//                 'OFFLINE'\n//               );\n//               idleIntent.attempts = 0;\n//             }\n//           }\n//         } catch (err) {\n//           idleIntent.attempts++;\n//           console.log('[TIMEOUT]\\ton', idleIntent.intent.radio_name);\n\n//           if (idleIntent.attempts >= 5) {\n//             await updatePivotController(\n//               idleIntent.intent.radio_name,\n//               'OFFLINE'\n//             );\n//             idleIntent.attempts = 0;\n//           }\n//         }\n//       }\n//     }\n//   } else {\n//     fatherCounter = 0;\n//   }\n//   fatherCounter++;\n//   ready = true;\n// };\n"
        }
    ]
}