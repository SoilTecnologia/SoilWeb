{
    "sourceFile": "packages/backend/src/middlewares/auth.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1645281232989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1645282188877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,9 @@\n const authMiddleware = (): ((\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n-) => any) => {\n-  return (\n+) => any) =>  (\n     req: express.Request,\n     res: express.Response,\n     next: express.NextFunction\n   ) => ({\n@@ -30,18 +29,17 @@\n \n     try {\n       const decode = <TokenInfo>(\n         jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n-      );\n+      ),\n \n-      let wrappedRequest = <IUserAuthInfoRequest>req;\n-      wrappedRequest.user = decode;\n+      let wrappedRequest = <IUserAuthInfoRequest>req,\n+      wrappedRequest.user = decode,\n \n       req = wrappedRequest;\n       next();\n     } catch (err) {\n       res.status(401).send(\"Invalid Token!\")\n     }\n   });\n-};\n \n export default authMiddleware;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645282254084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,9 @@\n const authMiddleware = (): ((\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n-) => any) =>  (\n-    req: express.Request,\n-    res: express.Response,\n-    next: express.NextFunction\n-  ) => ({\n+) => any) => ({\n     const token = req.headers.authorization;\n     if (!token) return res.status(401).send('No token provided');\n \n     try {\n"
                },
                {
                    "date": 1645282335692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,14 +14,14 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n-const authMiddleware = (): ((\n+const authMiddleware = (\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n-) => any) => ({\n-    const token = req.headers.authorization;\n+) => {\n+  const token = req.headers.authorization;\n     if (!token) return res.status(401).send('No token provided');\n \n     try {\n       const decode = <TokenInfo>(\n@@ -35,7 +35,10 @@\n       next();\n     } catch (err) {\n       res.status(401).send(\"Invalid Token!\")\n     }\n-  });\n+  );\n \n+}\n+    \n+\n export default authMiddleware;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645282352974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,8 @@\n       next();\n     } catch (err) {\n       res.status(401).send(\"Invalid Token!\")\n     }\n-  );\n \n }\n     \n \n"
                },
                {
                    "date": 1645282427107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,25 +19,29 @@\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n ) => {\n+    \n+\n+    \n+\n+}\n+function authMiddleware(req, res,next){\n   const token = req.headers.authorization;\n     if (!token) return res.status(401).send('No token provided');\n+  try {\n+    const decode = <TokenInfo>(\n+      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n+    ),\n \n-    try {\n-      const decode = <TokenInfo>(\n-        jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n-      ),\n+    let wrappedRequest = <IUserAuthInfoRequest>req,\n+    wrappedRequest.user = decode,\n \n-      let wrappedRequest = <IUserAuthInfoRequest>req,\n-      wrappedRequest.user = decode,\n-\n-      req = wrappedRequest;\n-      next();\n-    } catch (err) {\n-      res.status(401).send(\"Invalid Token!\")\n-    }\n-\n+    req = wrappedRequest;\n+    next();\n+  } catch (err) {\n+    res.status(401).send(\"Invalid Token!\")\n+  }\n }\n     \n \n export default authMiddleware;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1645282594336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import jwt from 'jsonwebtoken';\n-import express from 'express';\n+import express, Request, Response, {Nextjs\n+} from 'express';\n import { isType } from '../utils/types';\n import { IUserAuthInfoRequest } from '../types/express';\n import User from '../models/user';\n \n@@ -14,19 +15,15 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n-const authMiddleware = (\n-  req: express.Request,\n-  res: express.Response,\n-  next: express.NextFunction\n-) => {\n-    \n \n-    \n-\n+interface requisitionsExpress {\n+  req: express.Request;\n+  res: express.Response;\n+  next: express.NextFunction;\n }\n-function authMiddleware(req, res,next){\n+function authMiddleware ({req, res,next}: requisitionsExpress){\n   const token = req.headers.authorization;\n     if (!token) return res.status(401).send('No token provided');\n   try {\n     const decode = <TokenInfo>(\n"
                },
                {
                    "date": 1645282606688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import jwt from 'jsonwebtoken';\n-import express, Request, Response, {Nextjs\n-} from 'express';\n+import express, Request, Response from 'express';\n import { isType } from '../utils/types';\n import { IUserAuthInfoRequest } from '../types/express';\n import User from '../models/user';\n \n@@ -17,11 +16,11 @@\n   - Returns 40x if the token is invalid or not provided\n */\n \n interface requisitionsExpress {\n-  req: express.Request;\n-  res: express.Response;\n-  next: express.NextFunction;\n+  req: Request;\n+  res: Response;\n+  next: NextFunction;\n }\n function authMiddleware ({req, res,next}: requisitionsExpress){\n   const token = req.headers.authorization;\n     if (!token) return res.status(401).send('No token provided');\n"
                },
                {
                    "date": 1645282644569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,12 @@\n interface requisitionsExpress {\n   req: Request;\n   res: Response;\n   next: NextFunction;\n-}\n+};\n+\n function authMiddleware ({req, res,next}: requisitionsExpress){\n-  const token = req.headers.authorization;\n+  const token = req.headers.;\n     if (!token) return res.status(401).send('No token provided');\n   try {\n     const decode = <TokenInfo>(\n       jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n"
                },
                {
                    "date": 1645282712382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import jwt from 'jsonwebtoken';\n-import express, Request, Response from 'express';\n+import express from 'express';\n import { isType } from '../utils/types';\n import { IUserAuthInfoRequest } from '../types/express';\n import User from '../models/user';\n \n@@ -14,31 +14,34 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n+const authMiddleware = (): ((\n+  req: express.Request,\n+  res: express.Response,\n+  next: express.NextFunction\n+) => any) => {\n+  return (\n+    req: express.Request,\n+    res: express.Response,\n+    next: express.NextFunction\n+  ) => {\n+    const token = req.headers.authorization;\n+    if (!token) return res.status(401).send('No token provided');\n \n-interface requisitionsExpress {\n-  req: Request;\n-  res: Response;\n-  next: NextFunction;\n-};\n+    try {\n+      const decode = <TokenInfo>(\n+        jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n+      );\n \n-function authMiddleware ({req, res,next}: requisitionsExpress){\n-  const token = req.headers.;\n-    if (!token) return res.status(401).send('No token provided');\n-  try {\n\\ No newline at end of file\n-    const decode = <TokenInfo>(\n-      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n-    ),\n+      let wrappedRequest = <IUserAuthInfoRequest>req;\n+      wrappedRequest.user = decode;\n \n-    let wrappedRequest = <IUserAuthInfoRequest>req,\n-    wrappedRequest.user = decode,\n+      req = wrappedRequest;\n+      next();\n+    } catch (err) {\n+      res.status(401).send('Invalid Token!');\n+    }\n+  };\n+};\n \n-    req = wrappedRequest;\n-    next();\n-  } catch (err) {\n-    res.status(401).send(\"Invalid Token!\")\n-  }\n-}\n-    \n-\n-export default authMiddleware;\n+export default authMiddleware;\n"
                },
                {
                    "date": 1645282912264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,18 +14,17 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n-const authMiddleware = (): ((\n+type MiddlewareResponse = (\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n-) => any) => {\n-  return (\n-    req: express.Request,\n-    res: express.Response,\n-    next: express.NextFunction\n-  ) => {\n+) => any;\n+\n+const authMiddleware =\n+  (req, res, next) =>\n+  (req: express.Request, res: express.Response, next: express.NextFunction) => {\n     const token = req.headers.authorization;\n     if (!token) return res.status(401).send('No token provided');\n \n     try {\n@@ -41,7 +40,6 @@\n     } catch (err) {\n       res.status(401).send('Invalid Token!');\n     }\n   };\n-};\n \n export default authMiddleware;\n"
                },
                {
                    "date": 1645283009747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,26 +20,28 @@\n   res: express.Response,\n   next: express.NextFunction\n ) => any;\n \n-const authMiddleware =\n-  (req, res, next) =>\n-  (req: express.Request, res: express.Response, next: express.NextFunction) => {\n-    const token = req.headers.authorization;\n-    if (!token) return res.status(401).send('No token provided');\n+const authMiddleware = (\n+  req: express.Request,\n+  res: express.Response,\n+  next: express.NextFunction\n+) => {\n+  const token = req.headers.authorization;\n+  if (!token) return res.status(401).send('No token provided');\n \n-    try {\n-      const decode = <TokenInfo>(\n-        jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n-      );\n+  try {\n+    const decode = <TokenInfo>(\n+      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n+    );\n \n-      let wrappedRequest = <IUserAuthInfoRequest>req;\n-      wrappedRequest.user = decode;\n+    let wrappedRequest = <IUserAuthInfoRequest>req;\n+    wrappedRequest.user = decode;\n \n-      req = wrappedRequest;\n-      next();\n-    } catch (err) {\n-      res.status(401).send('Invalid Token!');\n-    }\n-  };\n+    req = wrappedRequest;\n+    next();\n+  } catch (err) {\n+    res.status(401).send('Invalid Token!');\n+  }\n+};\n \n export default authMiddleware;\n"
                },
                {
                    "date": 1645283015381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,13 +14,8 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n-type MiddlewareResponse = (\n-  req: express.Request,\n-  res: express.Response,\n-  next: express.NextFunction\n-) => any;\n \n const authMiddleware = (\n   req: express.Request,\n   res: express.Response,\n"
                },
                {
                    "date": 1645283053551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,15 +14,21 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n+type MiddlewareResponse = (\n+  req: express.Request,\n+  res: express.Response,\n+  next: express.NextFunction\n+) => any;\n \n const authMiddleware = (\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n-) => {\n-  const token = req.headers.authorization;\n+) => \n+  (\n+    const token = req.headers.authorization;\n   if (!token) return res.status(401).send('No token provided');\n \n   try {\n     const decode = <TokenInfo>(\n@@ -35,8 +41,8 @@\n     req = wrappedRequest;\n     next();\n   } catch (err) {\n     res.status(401).send('Invalid Token!');\n-  }\n-};\n+  })\n \n+\n export default authMiddleware;\n"
                },
                {
                    "date": 1645283180806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,21 +14,16 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n-type MiddlewareResponse = (\n-  req: express.Request,\n-  res: express.Response,\n-  next: express.NextFunction\n-) => any;\n+type MiddlewareResponse = {\n+  req: express.Request;\n+  res: express.Response;\n+  next: express.NextFunction;\n+};\n \n-const authMiddleware = (\n-  req: express.Request,\n-  res: express.Response,\n-  next: express.NextFunction\n-) => \n-  (\n-    const token = req.headers.authorization;\n+const authMiddleware = ({ req, res, next }: MiddlewareResponse) => {\n+  const token = req.headers.authorization;\n   if (!token) return res.status(401).send('No token provided');\n \n   try {\n     const decode = <TokenInfo>(\n@@ -41,8 +36,8 @@\n     req = wrappedRequest;\n     next();\n   } catch (err) {\n     res.status(401).send('Invalid Token!');\n-  })\n+  }\n+};\n \n-\n export default authMiddleware;\n"
                },
                {
                    "date": 1645283207170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   res: express.Response;\n   next: express.NextFunction;\n };\n \n-const authMiddleware = ({ req, res, next }: MiddlewareResponse) => {\n+const authMiddleware = ((req, res, next ): MiddlewareResponse) => {\n   const token = req.headers.authorization;\n   if (!token) return res.status(401).send('No token provided');\n \n   try {\n"
                },
                {
                    "date": 1645283281936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,15 +14,13 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n-type MiddlewareResponse = {\n-  req: express.Request;\n-  res: express.Response;\n-  next: express.NextFunction;\n-};\n-\n-const authMiddleware = ((req, res, next ): MiddlewareResponse) => {\n+const authMiddleware = (\n+  req: express.Request,\n+  res: express.Response,\n+  next: express.NextFunction\n+) => {\n   const token = req.headers.authorization;\n   if (!token) return res.status(401).send('No token provided');\n \n   try {\n"
                },
                {
                    "date": 1645283441186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,28 +14,34 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n-const authMiddleware = (\n+const authMiddleware = (): ((\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n-) => {\n-  const token = req.headers.authorization;\n-  if (!token) return res.status(401).send('No token provided');\n+) => any) => {\n+  return (\n+    req: express.Request,\n+    res: express.Response,\n+    next: express.NextFunction\n+  ) => {\n+    const token = req.headers.authorization;\n+    if (!token) return res.status(401).send('No token provided');\n \n-  try {\n-    const decode = <TokenInfo>(\n-      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n-    );\n+    try {\n+      const decode = <TokenInfo>(\n+        jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n+      );\n \n-    let wrappedRequest = <IUserAuthInfoRequest>req;\n-    wrappedRequest.user = decode;\n+      let wrappedRequest = <IUserAuthInfoRequest>req;\n+      wrappedRequest.user = decode;\n \n-    req = wrappedRequest;\n-    next();\n-  } catch (err) {\n-    res.status(401).send('Invalid Token!');\n-  }\n+      req = wrappedRequest;\n+      next();\n+    } catch (err) {\n+      res.status(401).send('Invalid Token!');\n+    }\n+  };\n };\n \n export default authMiddleware;\n"
                },
                {
                    "date": 1645284069635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,7 @@\n+import express from 'express';\n import jwt from 'jsonwebtoken';\n-import express from 'express';\n-import { isType } from '../utils/types';\n import { IUserAuthInfoRequest } from '../types/express';\n-import User from '../models/user';\n \n interface TokenInfo {\n   user_id: string;\n   user_type: string;\n@@ -32,9 +30,9 @@\n       const decode = <TokenInfo>(\n         jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n       );\n \n-      let wrappedRequest = <IUserAuthInfoRequest>req;\n+      const wrappedRequest = <IUserAuthInfoRequest>req;\n       wrappedRequest.user = decode;\n \n       req = wrappedRequest;\n       next();\n"
                },
                {
                    "date": 1645284145710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,34 +12,28 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n-const authMiddleware = (): ((\n+const authMiddleware = (\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n-) => any) => {\n-  return (\n-    req: express.Request,\n-    res: express.Response,\n-    next: express.NextFunction\n-  ) => {\n-    const token = req.headers.authorization;\n-    if (!token) return res.status(401).send('No token provided');\n+) => {\n+  const token = req.headers.authorization;\n+  if (!token) return res.status(401).send('No token provided');\n \n-    try {\n-      const decode = <TokenInfo>(\n-        jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n-      );\n+  try {\n+    const decode = <TokenInfo>(\n+      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n+    );\n \n-      const wrappedRequest = <IUserAuthInfoRequest>req;\n-      wrappedRequest.user = decode;\n+    const wrappedRequest = <IUserAuthInfoRequest>req;\n+    wrappedRequest.user = decode;\n \n-      req = wrappedRequest;\n-      next();\n-    } catch (err) {\n-      res.status(401).send('Invalid Token!');\n-    }\n-  };\n+    req = wrappedRequest;\n+    next();\n+  } catch (err) {\n+    res.status(401).send('Invalid Token!');\n+  }\n };\n \n export default authMiddleware;\n"
                },
                {
                    "date": 1645284167664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n const authMiddleware = (\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n-) => {\n+) => (\n   const token = req.headers.authorization;\n   if (!token) return res.status(401).send('No token provided');\n \n   try {\n@@ -33,7 +33,7 @@\n     next();\n   } catch (err) {\n     res.status(401).send('Invalid Token!');\n   }\n-};\n+)\n \n export default authMiddleware;\n"
                },
                {
                    "date": 1645284184078,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,24 +16,10 @@\n const authMiddleware = (\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n-) => (\n-  const token = req.headers.authorization;\n-  if (!token) return res.status(401).send('No token provided');\n-\n-  try {\n-    const decode = <TokenInfo>(\n-      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n-    );\n-\n-    const wrappedRequest = <IUserAuthInfoRequest>req;\n-    wrappedRequest.user = decode;\n-\n-    req = wrappedRequest;\n-    next();\n-  } catch (err) {\n-    res.status(401).send('Invalid Token!');\n-  }\n+) => {\n+ return ( const token = req.headers.authorization;\n )\n+};\n \n export default authMiddleware;\n"
                },
                {
                    "date": 1645284325244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import express from 'express';\n+import express, Request, Response, NextFunction from 'express';\n import jwt from 'jsonwebtoken';\n import { IUserAuthInfoRequest } from '../types/express';\n \n interface TokenInfo {\n@@ -17,9 +17,23 @@\n   req: express.Request,\n   res: express.Response,\n   next: express.NextFunction\n ) => {\n- return ( const token = req.headers.authorization;\n-)\n+  const token = req.headers.authorization;\n+  if (!token) return res.status(401).send('No token provided');\n+\n+  try {\n+    const decode = <TokenInfo>(\n+      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n+    );\n+\n+    const wrappedRequest = <IUserAuthInfoRequest>req;\n+    wrappedRequest.user = decode;\n+\n+    req = wrappedRequest;\n+    next();\n+  } catch (err) {\n+    res.status(401).send('Invalid Token!');\n+  }\n };\n \n export default authMiddleware;\n"
                },
                {
                    "date": 1645284441800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import express, Request, Response, NextFunction from 'express';\n+import { Request, Response, NextFunction } from 'express';\n import jwt from 'jsonwebtoken';\n import { IUserAuthInfoRequest } from '../types/express';\n \n interface TokenInfo {\n@@ -12,13 +12,9 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n-const authMiddleware = (\n-  req: express.Request,\n-  res: express.Response,\n-  next: express.NextFunction\n-) => {\n+const authMiddleware = (req: Request, res: Response, next: NextFunction) => {\n   const token = req.headers.authorization;\n   if (!token) return res.status(401).send('No token provided');\n \n   try {\n"
                },
                {
                    "date": 1645284556487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n+\n const authMiddleware = (req: Request, res: Response, next: NextFunction) => {\n   const token = req.headers.authorization;\n   if (!token) return res.status(401).send('No token provided');\n \n"
                },
                {
                    "date": 1645285321680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n \n-const authMiddleware = (req: Request, res: Response, next: NextFunction) => {\n+const authMiddleware = (req: Request, res: Response, next: NextFunction) => (\n   const token = req.headers.authorization;\n   if (!token) return res.status(401).send('No token provided');\n \n   try {\n@@ -30,7 +30,7 @@\n     next();\n   } catch (err) {\n     res.status(401).send('Invalid Token!');\n   }\n-};\n+)\n \n export default authMiddleware;\n"
                },
                {
                    "date": 1645285376705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,24 +13,13 @@\n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n \n-const authMiddleware = (req: Request, res: Response, next: NextFunction) => (\n+const authMiddleware = (req: Request, res: Response, next: NextFunction) => {\n   const token = req.headers.authorization;\n-  if (!token) return res.status(401).send('No token provided');\n+  if (!token) return res.status(401).send('No token provided')\n+  else return ()\n \n-  try {\n-    const decode = <TokenInfo>(\n-      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n-    );\n+  \n+};\n \n-    const wrappedRequest = <IUserAuthInfoRequest>req;\n-    wrappedRequest.user = decode;\n-\n-    req = wrappedRequest;\n-    next();\n-  } catch (err) {\n-    res.status(401).send('Invalid Token!');\n-  }\n-)\n-\n export default authMiddleware;\n"
                },
                {
                    "date": 1645285400141,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,21 @@\n */\n \n const authMiddleware = (req: Request, res: Response, next: NextFunction) => {\n   const token = req.headers.authorization;\n-  if (!token) return res.status(401).send('No token provided')\n-  else return ()\n+  if (!token) return res.status(401).send('No token provided');\n+  try {\n+    const decode = <TokenInfo>(\n+      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n+    );\n \n-  \n+    const wrappedRequest = <IUserAuthInfoRequest>req;\n+    wrappedRequest.user = decode;\n+\n+    req = wrappedRequest;\n+    next();\n+  } catch (err) {\n+    res.status(401).send('Invalid Token!');\n+  }\n };\n \n export default authMiddleware;\n"
                },
                {
                    "date": 1645533489703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n-import { Request, Response, NextFunction } from 'express';\n import jwt from 'jsonwebtoken';\n+import express from 'express';\n+import { isType } from '../utils/types';\n import { IUserAuthInfoRequest } from '../types/express';\n+import User from '../models/user';\n \n interface TokenInfo {\n   user_id: string;\n   user_type: string;\n@@ -12,24 +14,34 @@\n   \n   - Returns 200 and user details if it's valid\n   - Returns 40x if the token is invalid or not provided\n */\n+const authMiddleware = (): ((\n+  req: express.Request,\n+  res: express.Response,\n+  next: express.NextFunction\n+) => any) => {\n+  return (\n+    req: express.Request,\n+    res: express.Response,\n+    next: express.NextFunction\n+  ) => {\n+    const token = req.headers.authorization;\n+    if (!token) return res.status(401).send('No token provided');\n \n-const authMiddleware = (req: Request, res: Response, next: NextFunction) => {\n-  const token = req.headers.authorization;\n-  if (!token) return res.status(401).send('No token provided');\n-  try {\n-    const decode = <TokenInfo>(\n-      jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n-    );\n+    try {\n+      const decode = <TokenInfo>(\n+        jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n+      );\n \n-    const wrappedRequest = <IUserAuthInfoRequest>req;\n-    wrappedRequest.user = decode;\n+      const wrappedRequest = <IUserAuthInfoRequest>req;\n+      wrappedRequest.user = decode;\n \n-    req = wrappedRequest;\n-    next();\n-  } catch (err) {\n-    res.status(401).send('Invalid Token!');\n-  }\n+      req = wrappedRequest;\n+      next();\n+    } catch (err) {\n+      res.status(401).send('Invalid Token!');\n+    }\n+  };\n };\n \n export default authMiddleware;\n"
                }
            ],
            "date": 1645281232989,
            "name": "Commit-0",
            "content": "import jwt from 'jsonwebtoken';\nimport express from 'express';\nimport { isType } from '../utils/types';\nimport { IUserAuthInfoRequest } from '../types/express';\nimport User from '../models/user';\n\ninterface TokenInfo {\n  user_id: string;\n  user_type: string;\n}\n\n/*\n  This middleware processes the token received on the request header Authorization.\n  \n  - Returns 200 and user details if it's valid\n  - Returns 40x if the token is invalid or not provided\n*/\nconst authMiddleware = (): ((\n  req: express.Request,\n  res: express.Response,\n  next: express.NextFunction\n) => any) => {\n  return (\n    req: express.Request,\n    res: express.Response,\n    next: express.NextFunction\n  ) => ({\n    const token = req.headers.authorization;\n    if (!token) return res.status(401).send('No token provided');\n\n    try {\n      const decode = <TokenInfo>(\n        jwt.verify(token, process.env.TOKEN_SECRET as jwt.Secret)\n      );\n\n      let wrappedRequest = <IUserAuthInfoRequest>req;\n      wrappedRequest.user = decode;\n\n      req = wrappedRequest;\n      next();\n    } catch (err) {\n      res.status(401).send(\"Invalid Token!\")\n    }\n  });\n};\n\nexport default authMiddleware;"
        }
    ]
}