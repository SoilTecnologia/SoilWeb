{
    "sourceFile": "packages/backend/src/routes/users.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1645538260524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1645538260524,
            "name": "Commit-0",
            "content": "import express from 'express';\nimport authMiddleware from '../middlewares/auth';\nimport { signUpController, signInController } from '../controllers/users';\nimport { IUserAuthInfoRequest, authHandler } from '../types/express';\nimport { createFarmController } from '../controllers/farms';\n\nconst router = express.Router();\n\nrouter.post('/signup', async (req, res, next) => {\n  const { user_id, login, password, user_type } = req.body;\n\n  try {\n    const cookieInfo = await signUpController(\n      login,\n      password,\n      user_type,\n      user_id\n    );\n\n    res.send(cookieInfo);\n  } catch (err) {\n    console.log(`[ERROR] Server 500 on /users/signup:`);\n    console.log(err);\n    next(err);\n  }\n});\n\nrouter.post('/signin', async (req, res, next) => {\n  const { login, password } = req.body;\n\n  try {\n    const cookieInfo = await signInController(login, password);\n\n    res.send(cookieInfo);\n  } catch (err) {\n    console.log(`[ERROR] Server 500 on /users/signin:`);\n    console.log(err);\n    next(err);\n  }\n});\n\n/* Returns the user id. This route is used by the mobile application to check if the token\nit has saved is still valid.\n  - If it is valid, it returns the user id\n  - If it isn't, it will return a 401 on the auth middleware\n*/\nrouter.get(\n  '/auth',\n  authMiddleware(),\n  authHandler(\n    async (\n      req: IUserAuthInfoRequest,\n      res: express.Response,\n      next: express.NextFunction\n    ) => {\n      const { user } = req;\n      res.json({ user_id: user.user_id });\n    }\n  )\n);\n\nrouter.put(\n  '/addFarm',\n  authMiddleware(),\n  authHandler(\n    async (\n      req: IUserAuthInfoRequest,\n      res: express.Response,\n      next: express.NextFunction\n    ) => {\n      const { user_id } = req.user;\n      const { farm_id, farm_name, farm_city, farm_lng, farm_lat } = req.body;\n\n      try {\n        const newFarm = await createFarmController(\n          farm_id,\n          user_id,\n          farm_name,\n          farm_city,\n          farm_lng,\n          farm_lat\n        );\n\n        res.send(newFarm);\n      } catch (err) {\n        console.log(`[ERROR] Server 500 on /users/addFarm!`);\n        console.log(err);\n        next(err);\n      }\n    }\n  )\n);\n\nexport default router;\n"
        }
    ]
}