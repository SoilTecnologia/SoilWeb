{
    "sourceFile": "packages/backend/src/routes/farms.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1645534228552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1645534228551,
            "name": "Commit-0",
            "content": "/* eslint-disable spaced-comment */\nimport express from 'express';\nimport authMiddleware from '../middlewares/auth';\nimport { IUserAuthInfoRequest, authHandler } from '../types/express';\nimport {\n  readAllFarmController,\n  readMapFarmControler\n} from '../controllers/farms';\nimport { createNodeController } from '../controllers/nodes';\nimport Farm from '../models/farm';\nimport Pivot from '../models/pivot';\nimport State from '../models/state';\nimport StateVariable from '../models/stateVariable';\n\nconst router = express.Router();\n\nrouter.put(\n  '/addNode/:farm_id',\n  authMiddleware(),\n  authHandler(\n    async (\n      req: IUserAuthInfoRequest,\n      res: express.Response,\n      next: express.NextFunction\n    ) => {\n      const { farm_id } = req.params;\n      const { node_name, gateway, is_gprs, node_id } = req.body;\n\n      try {\n        const newNode = await createNodeController(\n          node_id,\n          farm_id,\n          node_name,\n          is_gprs,\n          gateway\n        );\n\n        res.send(newNode);\n      } catch (err) {\n        console.log(`[ERROR] Server 500 on /farms/addNode`);\n        console.log(err);\n        next(err);\n      }\n    }\n  )\n);\n\nrouter.get('/user/:id', (req: express.Request, res: express.Response) => {});\n\nrouter.get(\n  '/readAll',\n  authMiddleware(),\n  authHandler(\n    async (\n      req: IUserAuthInfoRequest,\n      res: express.Response,\n      next: express.NextFunction\n    ) => {\n      const { user_id } = req.user;\n\n      try {\n        const allFarmsFromUser = await readAllFarmController(user_id);\n\n        res.send(allFarmsFromUser);\n      } catch (err) {\n        console.log(`[ERROR] Server 500 on /farms/readAll`);\n        console.log(err);\n        next(err);\n      }\n    }\n  )\n);\n\ntype PivotMapData = {\n  pivot_position: { lng: Pivot['pivot_lng']; lat: Pivot['pivot_lat'] };\n  power: State['power'];\n  water: State['water'];\n  direction: State['direction'];\n  angle: StateVariable['angle'];\n  start_angle: Pivot['pivot_start_angle'];\n  end_angle: Pivot['pivot_end_angle'];\n};\n\ntype FullMapData = {\n  farm_position: { lng: Farm['farm_lng']; lat: Farm['farm_lat'] };\n  pivots: Array<PivotMapData>;\n};\n\nrouter.get(\n  '/map/:farm_id',\n  authMiddleware(),\n  async (req, res, next) /*: Promise<PivotMapData>*/ => {\n    const { farm_id } = req.params;\n\n    try {\n      const result = await readMapFarmControler(farm_id);\n\n      res.json(result);\n    } catch (err) {\n      console.log(`[ERROR] Server 500 on /farms/map`);\n      console.log(err);\n      next(err);\n    }\n  }\n);\n\n// router.get(\n//   '/readAll',\n//   authMiddleware(['SUDO']),\n//   authHandler(\n//     async (\n//       req: IUserAuthInfoRequest,\n//       res: express.Response,\n//       next: express.NextFunction\n//     ) => {\n//       const user = req.user;\n\n//       try {\n//         const farms = await readAllFarmController(user.user_id);\n\n//         return res.send(farms);\n//       } catch (err) {\n//         next(err);\n//       }\n//     }\n//   )\n// );\n\n// router.put(\n//   '/addUser/:target_farm_id',\n//   authMiddleware(['USER', 'SUDO']),\n//   authHandler(\n//     async (\n//       req: IUserAuthInfoRequest,\n//       res: express.Response,\n//       next: express.NextFunction\n//     ) => {\n//       const user = req.user;\n//       const { target_farm_id } = req.params;\n//       const { target_user_id, farm_user_type } = req.body;\n\n//       try {\n//         const farms = await addUserToFarmController(\n//           user.user_id,\n//           target_user_id,\n//           target_farm_id,\n//           farm_user_type\n//         );\n\n//         return res.send(farms);\n//       } catch (err) {\n//         next(err);\n//       }\n//     }\n//   )\n// );\n\n// router.delete('/:farm_id', authMiddleware(['SUDO']), async (req, res, next) => {\n//   const farm_id = req.params.farm_id;\n\n//   try {\n//     const deletedFarm = await deleteFarmController(farm_id);\n\n//     res.send(deletedFarm);\n//   } catch (err) {\n//     next(err);\n//   }\n// });\n\n// router.put(\n//   '/addAdmin/:target_farm_id',\n//   authMiddleware(['SUDO']),\n//   authHandler(\n//     async (\n//       req: IUserAuthInfoRequest,\n//       res: express.Response,\n//       next: express.NextFunction\n//     ) => {\n//       const user = req.user;\n//       const { target_farm_id } = req.params;\n//       const { target_user_id } = req.body;\n\n//       try {\n//         const farms = await addUserToFarmController(\n//           user.user_id,\n//           target_user_id,\n//           target_farm_id\n//         );\n\n//         return res.send(farms);\n//       } catch (err) {\n//         next(err);\n//       }\n//     }\n//   )\n// );\n\nexport default router;\n"
        }
    ]
}